{"meta":{"title":"Emily","subtitle":null,"description":null,"author":"Emily","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Markdown文件基本编写语法","slug":"Markdown文件基本编写语法","date":"2018-08-07T09:50:56.000Z","updated":"2018-09-13T03:36:04.386Z","comments":true,"path":"2018/08/07/Markdown文件基本编写语法/","link":"","permalink":"http://yoursite.com/2018/08/07/Markdown文件基本编写语法/","excerpt":"","text":"写blog需要使用Markdown，记录一些常用写法。 标题，最多6级：一级标题二级标题三级标题四级标题五级标题六级标题####### 七级标题 列表：无序号列表： 111 222 111 222 111 222 用*，+，-创建无序列表 有序号列表： 列表1 列表2 列表3 数字后加英文.创建有序列表。 序列1 序列2 序列3 序列根据第一行数字排序，与之后的列表数字无关。 区块： 要特别注意 一级块 二级块 三级块 用法就是在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格。 分割线 分割线可以由* - _（星号，减号，底线）这3个符号表示，注意至少要3个，且不需要连续，有空格也可以. 连接百度 链接的文字放在[]中，链接地址放在随后的（）中。 图片 用法跟链接的基本一样，唯一的不同就是，图片前面要写一个！（这是必须的）。 代码框单行 git status 多行 12git statusgit remote -v 单行代码两个反引号括起来，多行代码3个反引号括起来，多行可写注释。 表格 name age sex Emily 20 F lucy 18 M 冒号代表对齐方式。 name age sex Emily 20 F lucy 18 M 强调字体倾斜字体倾斜 字体加粗字体加粗 一个*或_包起文字，代表字体倾斜。两个**或__包起文字，代表字体加粗。 转义\\*#_ 需要转义前加斜杠\\ 删除线删除线 使用两个~包起文字","categories":[{"name":"资源","slug":"resource","permalink":"http://yoursite.com/categories/resource/"}],"tags":[]},{"title":"Git初次配置用户名和邮箱","slug":"Git初次配置用户名和邮箱","date":"2018-08-07T08:11:54.000Z","updated":"2018-09-13T03:34:38.346Z","comments":true,"path":"2018/08/07/Git初次配置用户名和邮箱/","link":"","permalink":"http://yoursite.com/2018/08/07/Git初次配置用户名和邮箱/","excerpt":"","text":"初次安装git后需要配置用户名和邮箱，输入命令：12$ git config --global user.email &quot;you@email.com&quot;$ git config --global user.name &quot;Your Name&quot; 即可。","categories":[{"name":"资源","slug":"resource","permalink":"http://yoursite.com/categories/resource/"}],"tags":[]},{"title":"Git使用ssh密钥","slug":"Git使用ssh密钥-0","date":"2018-08-07T08:08:18.000Z","updated":"2018-09-13T03:36:04.393Z","comments":true,"path":"2018/08/07/Git使用ssh密钥-0/","link":"","permalink":"http://yoursite.com/2018/08/07/Git使用ssh密钥-0/","excerpt":"","text":"git支持https和git两种传输协议，github分享链接时会有两种协议可选。可以使用命令 git remote -v 查看你当前使用的协议。git使用https协议，每次pull, push都会提示要输入密码，使用git协议，然后使用ssh密钥，就能免去每次都输密码的麻烦。 步骤：一、生成密钥对二、设置远程仓库上的公钥三、修改为git协议 一、生成密钥对先确认本机是否已经有公钥打开Git Bash Here，查看ssh目录12$ cd ~/.ssh$ ls 显示如下，有id_rsa和id_rsa.pub(或者是id_dsa和id_dsa.pub之类成对的文件)，有.pub 后缀的文件就是公钥，另一个文件则是密钥。1id_rsa id_rsa.pub known_hosts 如果没有，我们就建一个（未经实践）1$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot; 123Creates a new ssh key using the provided email # Generating public/private rsa key pair.Enter file in which to save the key (/home/you/.ssh/id_rsa): 直接回车。然后提示输入密码（安全点就输入，也可以不输入）1Enter same passphrase again: [Type passphrase again] 完成之后12Your public key has been saved in /home/you/.ssh/id_rsa.pub.The key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com 现在就生成了本地密钥对。 二、设置远程仓库上的公钥查看生成的公钥：1$ cat ~/.ssh/id_rsa.pub 123ssh-rsa AAA324zaC1ycQC0X6L1zLL4VHuvGb8uhmReSUzgntvk434aJ/v7kOdJ/MTyBlWXFCR+1nKhXpHAZsMR3c8E7CjZNJA+YZevY5UCvEg+umT7PHghKYaJwaCxV7sjCEAGDNXC26IBMdMgOluQjp6o6j2KAdtRBdCDS/QIU5TH1fiq9tITo/aXBvjZeD+gH/Apkh/0GbO8VQLhfuieheuiwfbkiohORn8N7C9lOa/UW3hu43489htGFlBVQeTE/IGqhMS5PMln3 admin@admin-PC 登录github帐户。点击头像，然后 Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH keytitle起个名字。key粘贴生成的公钥。 登录码云账户。点击头像，然后 设置 -&gt; 左栏点击 SSH公钥标题 起个名字。公钥 粘贴生成的公钥。 完成后验证一下是不是正常工作：1$ ssh -T git@github.com 看到如下内容，即设置成功：1Hi xxx! You&apos;ve successfully authenticated, but GitHub does not # provide shell access. 如果出现异常，出现：1ssh: connect to host github.com port 22: Connection timed out 出现提示，输入“yes”回车即可。 别人说，在存放公钥私钥(id_rsa和id_rsa.pub)的文件里，新建config文本，内容如下：123456Host github.comUser YourEmail@163.comHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443 我直接按提示，未执行创建文本，记录下来或许以后用到。 三、修改为git协议以上两个步骤设置过后，不需要再次设置，此步骤按实际情况执行，如果项目使用协议为https则需要此步骤。1$ git remote -v 使用https协议，显示如下：12origin https://github.com/someaccount/someproject.git (fetch)origin https://github.com/someaccount/someproject.git (push) 登录GitHub复制SSH协议相应url，使用命令修改url1$ git remote set-url origin SSH协议url 再使用命令查看协议12origin https://github.com/EmilyLee123/yLee123.github.io.git (fetch)origin https://github.com/EmilyLee123/yLee123.github.io.git (push) 切换成功，以后pull和push代码再也不用输入邮箱和密码。","categories":[{"name":"资源","slug":"resource","permalink":"http://yoursite.com/categories/resource/"}],"tags":[]},{"title":"Git用法","slug":"Git用法","date":"2018-07-24T05:49:35.000Z","updated":"2018-09-13T03:36:04.402Z","comments":true,"path":"2018/07/24/Git用法/","link":"","permalink":"http://yoursite.com/2018/07/24/Git用法/","excerpt":"","text":"Git用树来形容最贴切，大家都这么说。首先要有个仓库（树干），私有的就是栽在自己的院子里的树，公有的就是栽在路边的树。然后要有分支，master是主分支（树干），其他的分支（树枝）。把有改变的代码（叶子）加到分支上，写上备注（这片叶子是我的，有什么特别之处）。往上一推，合并到主干，就是一棵大了一点的树了，但树还是那棵树。再加东西是把那棵长大一点的树再拖下来，继续插枝。 记录下操作步骤（以win为例）：在需要推送的代码文件夹打开cmd。 查查自己在什么分支1$ git branch 创建分支1$ git checkout -b &quot;分支名字&quot; 将更改内容添加入分支添加全部更改内容1$ git add . 添加部分更改内容1$ git add 具体文件名 添加备注1$ git commit -m \"备注\" 推送分支1$ git push origin \"分支名字\" 到GitHub合并代码end 拉取新代码查查自己在什么分支1$ git branch 切换到主分支上1$ git checkout master 拉取代码1$ git pull origin master","categories":[{"name":"资源","slug":"resource","permalink":"http://yoursite.com/categories/resource/"}],"tags":[{"name":"第一篇博客","slug":"第一篇博客","permalink":"http://yoursite.com/tags/第一篇博客/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-07-23T04:25:03.000Z","updated":"2018-09-13T03:27:27.557Z","comments":true,"path":"2018/07/23/hello-world/","link":"","permalink":"http://yoursite.com/2018/07/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"测试","slug":"test","permalink":"http://yoursite.com/categories/test/"}],"tags":[]}]}